@page "/{recipePath}"
@using YamlDotNet.Serialization
@inject HttpClient Http

@if (_recipe == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <PageTitle>@_recipe.Title</PageTitle>

    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudImage Src="@($"recipes/{recipePath}/{_recipe.Image}")" Alt="recept-bild" Fluid="true" ObjectFit="ObjectFit.Cover" />
        </MudItem>
        <MudFlexBreak />
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-5">@(_recipe.Title)</MudText>
            <MudList T="string" ReadOnly="true" Dense="true" Gutters="true">
                @foreach (var section in _recipe.IngredientSections)
                {
                    <MudListItem Icon="@Icons.Material.Filled.ReceiptLong" Text="@(section.Title)" Expanded>
                        <NestedList>
                            @foreach (var ingredient in section.Ingredients)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.KeyboardArrowRight" Class="pr-5">
                                    @ingredient
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                }

                @foreach (var section in _recipe.StepSections)
                {
                    <MudListItem Icon="@Icons.Material.Filled.FoodBank" Text="@(section.Title)" Expanded>
                        <NestedList>
                            @foreach (var step in section.Steps)
                            {
                                <MudListItem Icon="@Icons.Material.Filled.KeyboardArrowRight" Class="pr-5">
                                    @step
                                </MudListItem>
                            }
                        </NestedList>
                    </MudListItem>
                }
            </MudList>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string? recipePath { get; set; }

    private Nonna.Web.Models.Recipe? _recipe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var recipeYaml = await Http.GetStringAsync($"recipes/{recipePath}/{recipePath}.yaml");

        var deserializer = new DeserializerBuilder().Build();

        _recipe = deserializer.Deserialize<Nonna.Web.Models.Recipe>(recipeYaml);
    }
}
